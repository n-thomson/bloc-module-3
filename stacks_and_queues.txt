1. What is the main difference between a stack and a queue?
Stack follows 'Last In First Out' order, meaning the last element to enter is the first one to exit. Queue, on the other hand, follows 'First In First Out' order, meaning the first element to enter is the first one to exit.
Stack uses push(insert) and pop(remove), where as queue uses enqueue(insert) and dequeue(remove).

2. What are the similarities between stacks and queues?
Both are data structures, where elements are stored and retrieved.


3.Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?
Undo would follows the stack data structure, with last element that is keyed in coming out first.
For redo, an undo needs to be performed prior to a redo, so this will be another stack that takes in elements popped out of the undo stack.

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".
var arr = (prompt('Enter the string you want to reverse: ')).split('');
var reversedArr = [];
var arrLength = arr.length;
for (let i=0; i< arrLength; i++){
	reversedArr[i] = arr.pop();
}
reversedString = reversedArr.join('');
console.log(reversedString);


2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

//Psuedocode
FUNCTION push(element)
  INCREMENT the stack position index by 1
  SET element to the location at the stack position index
END FUNCTION

FUNCTION pop
  SET the element at the stack position 0 to temp
  INCREMENT the stack position index by 1
  RETURN temp
END FUNCTION

var arr = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];
var response = prompt('Do you want to enqueue(yes or no)?');
while (response.toLowerCase() === 'yes'){
  newEntry = prompt("What do you want to add?");
  enqueue(newEntry);
  console.log(arr);
  response = prompt('Do you want to enqueue again(yes or no)?');
}

var requestDequeue = prompt("Do you want to dequeue(yes or no)?")
while (requestDequeue.toLowerCase() == 'yes' && arr.length>0){
  dequeue();
}

function enqueue(newEntry){
  arr.push(newEntry);
}

function dequeue(){
  let temp = arr.shift();
  if(arr.length != 0){
    requestDequeue = prompt("Do you want to dequeue again(yes or no)?");
  }
  console.log(temp);
}


1. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.
var arr = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];
var response = prompt('Do you want to enqueue(yes or no)?');
while (response.toLowerCase() === 'yes'){
  newEntry = prompt("What do you want to add?");
  enqueue(newEntry);
  console.log(arr);
  response = prompt('Do you want to enqueue again(yes or no)?');
}

var requestDequeue = prompt("Do you want to dequeue(yes or no)?")
while (requestDequeue.toLowerCase() == 'yes' && arr.length>0){
  dequeue();
}

function enqueue(newEntry){
  arr.push(newEntry);
}

function dequeue(){
  let temp = arr.shift();
  if(arr.length != 0){
    console.log(arr);
    requestDequeue = prompt("Do you want to dequeue again(yes or no)?");
  }
  else{
  console.log(temp);
  }
}
